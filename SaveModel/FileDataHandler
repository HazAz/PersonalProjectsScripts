using System;
using System.IO;
using UnityEngine;
using Newtonsoft.Json;
using System.Collections.Generic;

public class FileDataHandler
{
	private string dataDirPath = "";
	private string dataFileName = "";
	private bool useEncryption = false;
	private readonly string encryptionCodeWord = "word";
	private readonly string backupExtension = ".bak";

	public FileDataHandler(string dataDir, string dataFile, bool useEncryption)
	{
		this.dataDirPath = dataDir;
		this.dataFileName = dataFile;
		this.useEncryption = useEncryption;
	}

	public GameSaveData Load(string profileId, bool allowRestoreFromBackup = true)
	{
		// base case - if the profileId is null, return right away
		if (profileId == null)
		{
			return null;
		}

		string fullPath = Path.Combine(dataDirPath, profileId, dataFileName);
		GameSaveData loadedData = null;

		if (File.Exists(fullPath))
		{
			try
			{
				// serialize the C# game data object into JSON
				string dataToLoad = "";

				using (FileStream stream = new FileStream(fullPath, FileMode.Open))
				{
					using (StreamReader reader = new StreamReader(stream))
					{
						dataToLoad = reader.ReadToEnd();
					}
				}

				if (useEncryption)
				{
					dataToLoad = EncryptDecrypt(dataToLoad);
				}

				// Deserialize the data from Json back into the C# object
				loadedData = JsonConvert.DeserializeObject<GameSaveData>(dataToLoad);
			}
			catch (Exception e)
			{
				// since we're calling Load(..) recursively, we need to account for the case where
				// the rollback succeeds, but data is still failing to load for some other reason,
				// which without this check may cause an infinite recursion loop.
				if (allowRestoreFromBackup)
				{
					Debug.LogWarning("Failed to load data file. Attempting to roll back.\n" + e);
					bool rollbackSuccess = AttemptRollback(fullPath);
					if (rollbackSuccess)
					{
						// try to load again recursively
						loadedData = Load(profileId, false);
					}
				}
				// if we hit this else block, one possibility is that the backup file is also corrupt
				else
				{
					Debug.LogError("Error occured when trying to load file at path: "
						+ fullPath + " and backup did not work.\n" + e);
				}
			}
		}

		return loadedData;
	}

	public void Save(GameSaveData data, string profileId)
	{
		// base case - if the profileId is null, return right away
		if (profileId == null)
		{
			return;
		}

		string fullPath = Path.Combine(dataDirPath, profileId, dataFileName);
		string backupFilePath = fullPath + backupExtension;

		try
		{
			// create directory the file will be written to if it doesnt already exist
			Directory.CreateDirectory(Path.GetDirectoryName(fullPath));

			// serialize the C# game data object into JSON
			string dataToStore = JsonConvert.SerializeObject(data);

			if (useEncryption)
			{
				dataToStore = EncryptDecrypt(dataToStore);
			}

			using (FileStream stream = new FileStream(fullPath, FileMode.Create))
			{
				using (StreamWriter writer = new StreamWriter(stream))
				{
					writer.Write(dataToStore);
				}
			}

			// verify the newly saved file can be loaded successfully
			GameSaveData verifiedGameData = Load(profileId);
			// if the data can be verified, back it up
			if (verifiedGameData != null)
			{
				File.Copy(fullPath, backupFilePath, true);
			}
			// otherwise, something went wrong and we should throw an exception
			else
			{
				throw new Exception("Save file could not be verified and backup could not be created.");
			}
		}
		catch (Exception e)
		{
			Debug.LogError("Error occured when trying to save data to file: " + fullPath + "\n" + e);
		}
	}

	public void Delete(string profileId)
	{
		// base case - if the profileId is null, return right away
		if (profileId == null)
		{
			return;
		}

		string fullPath = Path.Combine(dataDirPath, profileId, dataFileName);
		try
		{
			// ensure the data file exists at this path before deleting the directory
			if (File.Exists(fullPath))
			{
				// delete the profile folder and everything within it
				Directory.Delete(Path.GetDirectoryName(fullPath), true);
			}
			else
			{
				Debug.LogWarning("Tried to delete profile data, but data was not found at path: " + fullPath);
			}
		}
		catch (Exception e)
		{
			Debug.LogError("Failed to delete profile data for profileId: "
				+ profileId + " at path: " + fullPath + "\n" + e);
		}
	}

	public Dictionary<string, GameSaveData> LoadAllProfiles()
	{
		Dictionary<string, GameSaveData> profileDictionary = new();

		IEnumerable<DirectoryInfo> dirInfos = new DirectoryInfo(dataDirPath).EnumerateDirectories();
		foreach (DirectoryInfo dirInfo in dirInfos)
		{
			string profileId = dirInfo.Name;
			string fullPath = Path.Combine(dataDirPath, profileId, dataFileName);
			if (!File.Exists(fullPath))
			{
				Debug.LogWarning("Skipping directory when loading all profules because it does not contain data: " + profileId);
				continue;
			}

			GameSaveData profileData = Load(profileId);

			if (profileData != null)
			{
				profileDictionary.Add(profileId, profileData);
			}
			else
			{
				Debug.LogError("Tried to load profile but something went wrong. ProfileId: " + profileId);
			}
		}

		return profileDictionary;
	}

	public string GetMostRecentlyUpdatedProfileId()
	{
		string mostRecentProfileId = null;

		Dictionary<string, GameSaveData> profilesGameData = LoadAllProfiles();
		foreach (KeyValuePair<string, GameSaveData> pair in profilesGameData)
		{
			string profileId = pair.Key;
			GameSaveData gameData = pair.Value;

			// skip this entry if the gamedata is null
			if (gameData == null)
			{
				continue;
			}

			// if this is the first data we've come across that exists, it's the most recent so far
			if (mostRecentProfileId == null)
			{
				mostRecentProfileId = profileId;
			}
			// otherwise, compare to see which date is the most recent
			else
			{
				DateTime mostRecentDateTime = DateTime.FromBinary(profilesGameData[mostRecentProfileId].lastUpdated);
				DateTime newDateTime = DateTime.FromBinary(gameData.lastUpdated);
				// the greatest DateTime value is the most recent
				if (newDateTime > mostRecentDateTime)
				{
					mostRecentProfileId = profileId;
				}
			}
		}
		return mostRecentProfileId;
	}

	private string EncryptDecrypt(string data)
	{
		string modifiedData = "";

		for (int i = 0; i < data.Length; ++i)
		{
			modifiedData += (char)(data[i] ^ encryptionCodeWord[i % encryptionCodeWord.Length]);
		}

		return modifiedData;
	}

	private bool AttemptRollback(string fullPath)
	{
		bool success = false;
		string backupFilePath = fullPath + backupExtension;
		try
		{
			// if the file exists, attempt to roll back to it by overwriting the original file
			if (File.Exists(backupFilePath))
			{
				File.Copy(backupFilePath, fullPath, true);
				success = true;
				Debug.LogWarning("Had to roll back to backup file at: " + backupFilePath);
			}
			// otherwise, we don't yet have a backup file - so there's nothing to roll back to
			else
			{
				throw new Exception("Tried to roll back, but no backup file exists to roll back to.");
			}
		}
		catch (Exception e)
		{
			Debug.LogError("Error occured when trying to roll back to backup file at: "
				+ backupFilePath + "\n" + e);
		}

		return success;
	}
}
